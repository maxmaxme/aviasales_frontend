{"version":3,"sources":["reducers.ts","helpers/numbers.ts","components/TicketSegment/index.tsx","components/Ticket/index.tsx","components/ShowMoreButton/index.tsx","entities/tab.ts","context.tsx","components/Tickets/index.tsx","components/Checkbox/index.tsx","components/Filter/index.tsx","components/Tabs/index.tsx","components/Header/index.tsx","components/App/index.tsx","index.tsx"],"names":["Types","declOfNum","number","titles","Math","abs","withZero","n","getDuration","totalMinutes","days","floor","hours","minutes","round","TicketSegment","stopsCount","segment","departureDate","Date","date","departureDateHM","getHours","getMinutes","arrivalDate","getTime","duration","arrivalDateHM","className","origin","destination","stops","length","replace","toString","join","Ticket","price","ticket","Intl","NumberFormat","style","currency","minimumFractionDigits","format","src","carrier","alt","segments","map","index","ShowMoreButton","ticketReducer","state","action","type","SetTickets","payload","filtersReducer","SetStopsCount","AddStopCount","includes","RemoveStopCount","filter","stopCount","sortReducer","SetSort","TAB_IDS","initialState","tickets","ApiResponse","sort","filters","AppContext","createContext","dispatch","mainReducer","AppProvider","children","useReducer","Provider","value","Tickets","useContext","filteredTickets","ticketStopsCount","reduce","accumulator","currentValue","slice","Checkbox","title","checked","onChange","getCheckboxLabel","Filter","ticketsStopsCount","v","i","a","indexOf","onChangeStopsCount","e","target","Tab","selected","onSelect","cn","onClick","Tabs","tabs","id","tab","tabId","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4b10efb.chunk.js","sourcesContent":["import { Ticket } from './entities/ticket';\nimport { TabIds } from './entities/tab';\n\ntype ActionMap<M extends { [index: string]: any }> = {\n  [Key in keyof M]: M[Key] extends undefined\n    ? {\n      type: Key;\n    }\n    : {\n      type: Key;\n      payload: M[Key];\n    }\n};\n\nexport enum Types {\n  // eslint-disable-next-line no-unused-vars\n  SetTickets = 'SET_TICKETS',\n  // eslint-disable-next-line no-unused-vars\n  SetSort = 'SET_SORT',\n  // eslint-disable-next-line no-unused-vars\n  AddStopCount = 'ADD_STOP_COUNT',\n  // eslint-disable-next-line no-unused-vars\n  RemoveStopCount = 'REMOVE_STOP_COUNT',\n  // eslint-disable-next-line no-unused-vars\n  SetStopsCount = 'SET_STOPS_COUNT',\n}\n\nexport type Actions = TicketActions | SortActions | FiltersActions;\n\n// Product\n\ntype TicketPayload = {\n  [Types.SetTickets] : Ticket[];\n}\n\nexport type TicketActions = ActionMap<TicketPayload>[keyof ActionMap<TicketPayload>];\n\nexport const ticketReducer = (state: Ticket[], action: Actions) => {\n  switch (action.type) {\n  case Types.SetTickets:\n    return action.payload;\n  default:\n    return state;\n  }\n};\n\ntype FiltersPayload = {\n  [Types.SetStopsCount] : number[];\n  [Types.AddStopCount] : number;\n  [Types.RemoveStopCount] : number;\n}\n\nexport type FiltersActions = ActionMap<FiltersPayload>[keyof ActionMap<FiltersPayload>];\n\nexport const filtersReducer = (state: {stopsCount: number[]}, action: Actions) => {\n  switch (action.type) {\n  case Types.SetStopsCount:\n    return {\n      ...state,\n      stopsCount: action.payload,\n    };\n  case Types.AddStopCount:\n    return {\n      ...state,\n      stopsCount: !state.stopsCount.includes(action.payload) ?\n        [...state.stopsCount, action.payload] : state.stopsCount,\n    };\n  case Types.RemoveStopCount:\n    return {\n      ...state,\n      stopsCount: state.stopsCount.filter((stopCount) => {\n        return stopCount !== action.payload;\n      }),\n    };\n  default:\n    return state;\n  }\n};\n\n// Sort\n\ntype SortPayload = {\n  [Types.SetSort] : TabIds;\n}\n\nexport type SortActions = ActionMap<SortPayload>[keyof ActionMap<SortPayload>];\n\nexport const sortReducer = (state: TabIds, action: Actions) => {\n  switch (action.type) {\n  case Types.SetSort:\n    return action.payload;\n  default:\n    return state;\n  }\n};\n","export const declOfNum = (number: number, titles: [string, string, string]) => { // 1, 3, 10\n  const cases = [2, 0, 1, 1, 1, 2];\n  number = Math.abs(number);\n  return titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];\n};\n","import React from 'react';\nimport { TicketSegment as TicketSegmentType } from '../../entities/ticket';\nimport './index.css';\nimport { declOfNum } from '../../helpers/numbers';\n\ntype Params = {\n  segment: TicketSegmentType,\n}\n\nconst withZero = (n: number) => n < 10 ? `0${n}` : n;\nconst getDuration = (totalMinutes: number) => {\n  const days = Math.floor(totalMinutes / 1440); // 60*24\n  const hours = Math.floor((totalMinutes - (days * 1440)) / 60);\n  const minutes = Math.round(totalMinutes % 60);\n\n  if (days) {\n    return `${days}д ${hours}ч ${withZero(minutes)}м`;\n  } else {\n    return `${hours}ч ${withZero(minutes)}м`;\n  }\n};\n\nconst getStopsText = (stopsCount: number) => {\n  if (!stopsCount) {\n    return 'без пересадок';\n  }\n\n  return declOfNum(stopsCount, ['%s пересадка', '%s пересадки', '%s пересадок'])\n    .replace('%s', stopsCount.toString());\n};\n\nexport const TicketSegment = ({ segment }: Params) => {\n  const departureDate = new Date(segment.date);\n  const departureDateHM = `${withZero(departureDate.getHours())}:${withZero(departureDate.getMinutes())}`;\n  const arrivalDate = new Date(departureDate.getTime() + segment.duration * 60000);\n  const arrivalDateHM = `${withZero(arrivalDate.getHours())}:${withZero(arrivalDate.getMinutes())}`;\n\n  return (\n    <div className=\"TicketSegment\">\n      <div className=\"TicketSegment__data\">\n        <div className=\"TicketSegment__dataHeader\">{segment.origin} – {segment.destination}</div>\n        <div className=\"TicketSegment__dataText\">{departureDateHM} – {arrivalDateHM}</div>\n      </div>\n      <div className=\"TicketSegment__data\">\n        <div className=\"TicketSegment__dataHeader\">в пути</div>\n        <div className=\"TicketSegment__dataText\">{getDuration(segment.duration)}</div>\n      </div>\n      <div className=\"TicketSegment__data\">\n        <div className=\"TicketSegment__dataHeader\">{getStopsText(segment.stops.length)}</div>\n        <div className=\"TicketSegment__dataText\">{segment.stops.join(', ')}</div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Ticket as TicketType } from '../../entities/ticket';\nimport { TicketSegment } from '../TicketSegment';\nimport './index.css';\n\ntype Params = {\n  ticket: TicketType,\n}\n\nconst formatPrice = (price: number) => {\n  return new Intl.NumberFormat('ru-RU', {\n    style: 'currency',\n    currency: 'RUB',\n    minimumFractionDigits: 0,\n  }).format(price);\n};\n\nexport const Ticket = ({ ticket }: Params) => {\n  return (\n    <div className=\"Ticket\">\n      <div className=\"Ticket__header\">\n        <div className=\"Ticket__price\">{formatPrice(ticket.price)}</div>\n        <div className=\"Ticket__carrierLogo\">\n          <img src={`//pics.avs.io/99/36/${ticket.carrier}.png`} alt=\"\" />\n        </div>\n      </div>\n      <div className=\"Ticket__segments\">\n        {ticket.segments.map((segment, index) => (\n          <div key={index} className=\"Ticket__segment\">\n            <TicketSegment segment={segment} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n","import React from 'react';\nimport './index.css';\n\nexport const ShowMoreButton = () => {\n  return (\n    <button className=\"ShowMoreButton\">Показать еще 5 билетов!</button>\n  );\n};\n","export const TAB_IDS = {\n  CHEAP: 0,\n  FAST: 1,\n  OPTIMAL: 2,\n};\n\nexport type TabIdsKeys = keyof typeof TAB_IDS;\nexport type TabIds = typeof TAB_IDS[TabIdsKeys];\n\nexport type Tab = {\n  id: TabIds,\n  title: string,\n}\n","import React, { createContext, useReducer, Dispatch } from 'react';\nimport { ticketReducer, TicketActions, SortActions, sortReducer, FiltersActions, filtersReducer } from './reducers';\nimport { Ticket } from './entities/ticket';\nimport ApiResponse from './tickets.json';\nimport { TAB_IDS, TabIds } from './entities/tab';\n\ntype InitialStateType = {\n  tickets: Ticket[];\n  sort: TabIds;\n  filters: {\n    stopsCount: number[],\n  };\n}\n\nconst initialState = {\n  tickets: ApiResponse.tickets,\n  sort: TAB_IDS.OPTIMAL,\n  filters: {\n    stopsCount: [],\n  },\n};\n\nconst AppContext = createContext<{\n  state: InitialStateType;\n  dispatch: Dispatch<TicketActions | SortActions | FiltersActions>;\n}>({\n  state: initialState,\n  dispatch: () => null,\n});\n\nconst mainReducer = ({ tickets, sort, filters }: InitialStateType, action: SortActions | TicketActions | FiltersActions) => ({\n  filters: filtersReducer(filters, action),\n  sort: sortReducer(sort, action),\n  tickets: ticketReducer(tickets, action),\n});\n\n\nconst AppProvider: React.FC = ({ children }: any) => {\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport { AppProvider, AppContext };\n","import React, { useContext } from 'react';\nimport { Ticket } from '../Ticket';\nimport './index.css';\nimport { ShowMoreButton } from '../ShowMoreButton';\nimport { AppContext } from '../../context';\n\nexport const Tickets = () => {\n  const { state: { tickets, filters } } = useContext(AppContext);\n  const filteredTickets = tickets.filter((ticket) => {\n    if (filters.stopsCount.length) {\n      const ticketStopsCount = ticket.segments\n        .map((segment) => segment.stops.length)\n        .reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n      return filters.stopsCount.includes(ticketStopsCount);\n    }\n\n    return true;\n  });\n  return (\n    <div className=\"Tickets\">\n      <div className=\"Tickets__list\">\n        {filteredTickets.slice(0, 5).map((ticket, index) => (\n          <div key={index} className=\"Tickets__ticket\">\n            <Ticket ticket={ticket} />\n          </div>\n        ))}\n      </div>\n      <div className=\"Tickets__showMoreButton\">\n        <ShowMoreButton />\n      </div>\n    </div>\n  );\n};\n\n","import React, { ChangeEvent } from 'react';\nimport './index.css';\n\nexport const Checkbox = ({ title, checked, onChange }: { title: string, checked: boolean, onChange: (e: ChangeEvent<HTMLInputElement>) => void }) => {\n  return (\n    <label className=\"Checkbox\">\n      <input className=\"Checkbox__input\" type=\"checkbox\" checked={checked} onChange={onChange}/>\n      <span className=\"Checkbox__box\"/>\n      {title}\n    </label>\n  );\n};\n","import React, { ChangeEvent, useContext } from 'react';\nimport { declOfNum } from '../../helpers/numbers';\nimport { Checkbox } from '../Checkbox';\nimport './index.css';\nimport { AppContext } from '../../context';\nimport { Types } from '../../reducers';\n\nconst getCheckboxLabel = (stopCount: number) => {\n  return stopCount ? declOfNum(stopCount, ['%s пересадка', '%s пересадки', '%s пересадок'])\n    .replace('%s', stopCount.toString()) : 'Без пересадок';\n};\n\nexport const Filter = () => {\n  const { state: { tickets, filters: { stopsCount } }, dispatch } = useContext(AppContext);\n  const ticketsStopsCount = tickets.map((ticket) => ticket.segments\n    .map((segment) => segment.stops.length)\n    .reduce((accumulator, currentValue) => accumulator + currentValue, 0))\n    .filter((v, i, a) => a.indexOf(v) === i)\n    .sort();\n\n  const onChangeStopsCount = (stopCount: number) => (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: e.target.checked ? Types.AddStopCount : Types.RemoveStopCount,\n      payload: stopCount,\n    });\n  };\n  const onChangeAll = () => dispatch({\n    type: Types.SetStopsCount,\n    payload: [],\n  });\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter__header\">Количество пересадок</div>\n      <label className=\"Filter__item\">\n        <Checkbox\n          checked={!stopsCount.length}\n          onChange={onChangeAll}\n          title=\"Все\"/>\n      </label>\n      {ticketsStopsCount.map((stopCount) => (\n        <label key={stopCount} className=\"Filter__item\">\n          <Checkbox\n            checked={stopsCount.includes(stopCount)}\n            onChange={onChangeStopsCount(stopCount)}\n            title={getCheckboxLabel(stopCount)}/>\n        </label>\n      ),\n      )}\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { Tab as TabType, TAB_IDS, TabIds } from '../../entities/tab';\nimport './index.css';\nimport { AppContext } from '../../context';\nimport { Types } from '../../reducers';\n\nconst Tab = ({ title, selected, onSelect }: {title: string, selected: boolean, onSelect: () => void}) => {\n  return (\n    <button className={cn('Tabs__tab', { 'Tabs__tab--selected': selected })} onClick={onSelect}>\n      {title}\n    </button>\n  );\n};\n\nexport const Tabs = () => {\n  const { state: { sort }, dispatch } = useContext(AppContext);\n  const tabs: TabType[] = [\n    { id: TAB_IDS.CHEAP, title: 'Самый дешёвый' },\n    { id: TAB_IDS.FAST, title: 'Самый быстрый' },\n    { id: TAB_IDS.OPTIMAL, title: 'Оптимальный' },\n  ];\n  const onSelect = (tabId: TabIds) => () => dispatch({\n    type: Types.SetSort,\n    payload: tabId,\n  });\n\n  return (\n    <div className=\"Tabs\">\n      {tabs.map((tab) => (\n        <Tab key={tab.id} title={tab.title} selected={tab.id === sort} onSelect={onSelect(tab.id)} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './index.css';\n\nexport const Header = () => {\n  return (\n    <div className=\"Header\" />\n  );\n};\n","import React from 'react';\nimport { Tickets } from '../Tickets';\nimport { Filter } from '../Filter';\nimport { Tabs } from '../Tabs';\nimport { Header } from '../Header';\nimport './index.css';\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App__content\">\n        <Filter />\n        <div>\n          <Tabs />\n          <Tickets />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport { AppProvider } from './context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n"],"sourceRoot":""}